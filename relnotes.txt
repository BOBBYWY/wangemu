============================================================================
		   Wang 2200 emulator release notes, v3.0-pre
                                January 19, 2018
============================================================================

---- What is It? ----

This emulates a Wang 2200 system with a choice of five CPU architectures:

    * 2200B     (1st generation 2200, with a somewhat limited command set)
    * 2200T     (the highest end of the 1st generation 2200's)
    * 2200VP    (2nd generation CPU)
    * 2200MVP-C (2nd generation CPU, w/multiple users and 64K word ucode store)
    * MicroVP   (3rd generation CPU, supporting up to 8MB of data RAM)

and a number of peripherals:

    * 6312 (64x16) and 7011 (80x24) CRT controllers
    * 6367 keyboard controller
    * MXD terminal mux, connected to one to four 2236 terminals
    * either dumb or intelligent disk controller, capable of modeling any
      2270 floppy disk, 2260 hard disk, and 2280 large hard disk subsystems
    * configurable printer controller

The emulator is primarily written under Windows 7, but it should also run
under Windows Vista, Windows 8, and Windows 10 as well. This emulator
is untested under Windows XP and probably does not run.

Due to the contribution of Paul Heller, the emulator runs natively on Mac
OS X (10.4.2 at least) as well.
[ this is surely broken in the pre-release; it will be rectified when the
  emulator makes it to release status ]

The emulator very well might run on Linux via Wine, but it hasn't been tested.

---- User-visible Changes ----

*) Previously, Alt-R would do a hard reset of the emulator, and Alt-W would
   do a warm reset, which is analogous to pressing the RESET button on a
   2200T terminal or the SHIFT-RESET key on a serial terminal. To make it
   harder to accidentally hit this key, the mapping is now
       Shift-Alt-R --> hard reset
       Shift-Alt-W --> warm reset

*) the option to control whether disk accesses are performed at the same
   speed as a real 2200 ("realtime") or quickly ("unregulated") used to be
   a checkbox item on the system configuration dialog.  Now it appears in
   the more logical place (and easier to access), the Disk menu.

*) support for more system CPU and RAM configurations

*) Added emulation of a MXD terminal mux and 2236DE terminal.
   Why MXD and not MXE? One good reason is that OS's before 2.4 would
   not run with an MXE terminal mux.

   When not emulating a smart terminal, the host computer's TAB key maps
   to the Wang BASIC "NEXT STMT" key, which in Wang BASIC inserts the next
   highest unused line number (rounded up to the next 10). For smart
   terminals, TAB maps to the TAB or FN key (depending if DW or DE terminal).

*) It is now possible to run MVP OS's, but of course the system configuration
   must have at least one 2236MXD terminal mux.

*) Previously, printing HEX(07) produced a default bell-like sound.
   Now the emulator emits a sound very much like a real Wang terminal.

*) Previously, the emulator could be launched like this:
      wangemu.exe -s somescript.w22
   and the name script would be fed into the emulator.  But that isn't
   useful now (if it ever was) for (M)VP systems, which must be configured
   before they can run a program.  Now it ignores the command line arguments.

---- Bugs Fixed in this Release ----

*) Wang disk controllers supported "hog mode", where a given CPU could
   lock a disk drive for exclusive use, mostly to ensure atomic r/w
   behavior. Wangemu doesn't emulate multiple systems, so there is no
   need to emulate a disk mux, but there is one facet which was missing.
   One method of triggering hog mode was to address the drive with the
   high bit of the address set, eg /310 would become /390. So now the
   emulator ignores the most significant I/O address bit when doing
   address decode, but no other aspect of hog mode is emulated.

*) Some disk controllers supported more advanced commands than just the
   basic read sector, write sector, verify sector. In fact, a few of
   them were implemented for "intelligent" disk controller mode. Recently
   unearthed internal Wang documentation showed that the VERIFY_SECTORS
   command response contained a three byte sector address, not two bytes,
   as was previously emulated. However, I've had a hard time triggering
   BASIC to actually use this feature, so it is really not yet tested.

*) If the disk controller receives a channel command which is either not
   implemented or is unknown, a warning dialog will appear stating as much,
   but a given bad command byte will only trigger the warning once, to
   keep from becoming intrusive. Also, in accordance with the Wang internal
   documentation, a bad command byte is echoed back with all bits inverted
   so that the microcode can detect it and abort the command.

*) The disk controller would assert if it received an unexpected value for
   the first byte of the command sequence. Because $GIO programs can send
   anything at all, the assert was removed and the other values get mapped
   to assume a VP or MVP host if the first byte isn't 0x00.

*) the "Disk/New Disk..." disk factory allowed specifying DS-112, DS-140,
   or DS-224 disk drive types. These attempted to create disks with 65536
   sectors/track, but this would cause an assertion, as 65535 is the maximum
   sector address which can be specified with a 16b number.

*) The legal sizes of data RAM for 2200VP CPUs was wrong, and is now matches
   what was historically accurate. It used to be configuring a VP in the
   emulator with 16 KB or 48 KB of RAM would trigger an assertion.

---- Minor Tweaks and Implementation Changes ----

*) compiled with the latest wxWidgets library release, 3.1.0,
   and Microsoft Studio Community 2017 compiler.

*) fixed a typo in errtable.cpp for error 73;
   it should read "SAVE DCF" instead of "SAVE SCF"

*) got rid of unnecessary wx-isms;
   now using modern c++11 features when it simplifies the code

---- Known Bugs ----

*) The real 2200 CPUs occasionally insert dummy microinstruction cycles
   to performs memory refresh. This isn't modeled in the emulator,
   so the emulator is about 3% faster than real-time.

*) The emulator allows redirecting the printer output to a real, physically
   attached printer. The dialog offers two choices: LPT1 and LPT2.
   Just about now PCs these days support parallel ports. The following
   instructions are now to map a USB port to one of those logical printer
   ports. However, these directions worked on one PC in particular, and
   may need tweaking to get it to work for other systems (or maybe doesn't
   work at all):

   From a command prompt, use the command
       NET USE LPT1: \\JIM-580\HP-920 /PERSISTENT:YES
   to map LPT1 to the named network printer. "JIM-580" is the network name
   of my PC, and "HP-920" is the name of the attached USB printer.
   Obviously change those for your situation.

   However, this doesn't quite work because the emulator will send a
   simple stream of ASCII characters as if it was talking to a dumb printer,
   but the USB printer expects to receive some higher level (HP?) protocol.
   The next part tells the PC to map it to whatever the printer is expecting.

    + Go to "Devices and Printers" control panel.
    + Select the "Add a printer" menu at the top.
    + Specify "Add a local printer"
    + Under "Use an existing port:", select the one corresponding to your USB
      printer ("USB001" in my case); press "Next"
    + It now asks to install the printer driver. Under Manufacturer, pick
      "Generic". Under Printers, pick "Generic / Text Only"; press "Next"
    + Select "use the driver that is currently installed"
      (at least, that is what I did); press "Next"
    + Time to create a printer name. I made mine "USB-ASCII"; press "Next"
    + From a dos prompt, type
        NET USE LPT2: \\<machine_name>\USB-ASCII /PERSISTENT:YES
      It should reply "The command completed successfully".
    + From the Wang 2200 emulator printer windows, select LPT2 as the real
      printer to direct output to.
    + In my case, I had to do "SELECT LIST 015" to get the Wang to put out a
      line feed after each carriage return. The 215 device just ends each line
      with a CR and no LF.
    + If the program ends without filling the last page, you may need to send a
      HEX(0C) (page feed) to the printer to flush out the partial page.


